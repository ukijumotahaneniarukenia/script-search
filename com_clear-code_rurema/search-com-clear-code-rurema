#!/usr/bin/env bash

DEFAULT_WEB_BROWSER=brave-browser

SEARCH_ENGINE_PAGE="https://rurema.clear-code.com/"

ZERO_PAD_LEN="%03d"

INCLUDE_LIST=$HOME/script-search/L*

EXCLUDE_LIST=$HOME/script-search/L00*

SITE_NAME=$(echo ${0##*/}| ruby -F- -anle 'puts $F[1..$F.size-1].join("_")')

OPTION_FILE_NAME=$HOME/script-search/$SITE_NAME/T03*

OPTION_LIST=$(cat $OPTION_FILE_NAME|sed 's/^/          /')

USAGE_FILE_NAME=$HOME/script-search/$SITE_NAME/T06*

USAGE_LIST=$(cat $USAGE_FILE_NAME|sed 's/^/          /')

PLACE_HOLDER_FILE_NAME=$HOME/script-search/$SITE_NAME/T02*

PARAMETER_PATTERN_FILE_NAME=$HOME/script-search/$SITE_NAME/T04*

SEARCH_PATTERN_FILE=$(ls $INCLUDE_LIST|grep -v $EXCLUDE_LIST | while read list;do cat $list | grep -P "$SITE_NAME"; [[ 0 -eq $? ]] && echo $list ;done)

SEARCH_PATTERN=

case $SEARCH_PATTERN_FILE in
    *)
      if [[ $SEARCH_PATTERN_FILE =~ "query" ]]; then
        SEARCH_PATTERN="?"
      fi
      if [[ $SEARCH_PATTERN_FILE =~ "path" ]]; then
        SEARCH_PATTERN="/"
      fi
esac

usage(){
cat <<EOS
Usage:
  OPTION:
$(cat <<INNER
$OPTION_LIST
INNER
)

     CMD: $0 search NLP

     CMD: $0 add https://duckduckgo.com/?q=Sudachi https://duckduckgo.com/?q=NLP

     CMD: $0 remove {1..3} 9 {7..8}

$(cat <<INNER
$USAGE_LIST
INNER
)
EOS

exit 0

}

is_single_row(){
  #単一行チェック
  local CNT=0
  while read ln;do
    [ $(echo $ln | grep -c "0a") -eq 1 ] && CNT=$((CNT + 1))
  done < <(echo "$@" | xxd -ps -c1)
  [ $CNT -gt 1 ] || echo 0
  [ $CNT -gt 1 ] && echo 1
}

add(){

  URL=( "$@" );

  INDEX_NO=
  for e in ${URL[@]};do

    LAST_INDEX_NO=$(grep -Po '^[0-9]+' $USAGE_FILE_NAME|tail -n1|bc)

    if [[ -z $LAST_INDEX_NO ]];then
      INDEX_NO=$(printf $ZERO_PAD_LEN 1)
    else
      INDEX_NO=$(printf $ZERO_PAD_LEN $(( $LAST_INDEX_NO + 1)))
    fi

    echo $INDEX_NO "$e" >> $USAGE_FILE_NAME

  done

  exit 0
}

remove(){

  NO=( "$@" );

  for i in ${NO[@]};do

    sed -i /$(printf $ZERO_PAD_LEN $i)/d $USAGE_FILE_NAME

  done

  exit 0
}

search(){

  local OPTION_ARGS=( "$@" )

  local OPTION_CNT=${#OPTION_ARGS[@]}

  local BUILD_QUERY_PARAMETER=
  local BUILD_SEARCH_PARAMETER=
  local BUILD_OPTION_PARAMETER=

  local SEARCH_CONDITION_JOINER=$(cat $PLACE_HOLDER_FILE_NAME | grep SEARCH_CONDITION_JOINER| sed 's/.*=//')
  local SEARCH_CONDITION_JOINER_REGEXP_PATTERN="^$SEARCH_CONDITION_JOINER"
  local SEARCH_CONDITION_KEY=$(cat $PLACE_HOLDER_FILE_NAME | grep SEARCH_CONDITION_KEY| sed 's/.*=//')
  local SEARCH_CONDITION_KEY_REGEXP_PATTERN="$SEARCH_CONDITION_KEY="

  for (( i=0;i<$OPTION_CNT;i++ ));do

    if [[ ${OPTION_ARGS[@]:$i:1} =~ $OPTION_ARGS_REGEXP_PATTERN ]];then

      local LIKE_PATTERN=$(echo ${OPTION_ARGS[@]:$i:1} |ruby -F- -anle 'puts $F.filter{|x|x.size!=0}.join(".")')
      local OPTION_PARAMETER=$(cat $PARAMETER_PATTERN_FILE_NAME | grep -P $LIKE_PATTERN)
      BUILD_OPTION_PARAMETER=$BUILD_OPTION_PARAMETER$OPTION_PARAMETER

    else

      BUILD_SEARCH_PARAMETER=$BUILD_SEARCH_PARAMETER$SEARCH_CONDITION_JOINER${OPTION_ARGS[@]:$i:1}

    fi
  done

  BUILD_QUERY_PARAMETER=$(echo $BUILD_SEARCH_PARAMETER | sed "s/$SEARCH_CONDITION_JOINER_REGEXP_PATTERN/$SEARCH_CONDITION_KEY_REGEXP_PATTERN/")$BUILD_OPTION_PARAMETER

  echo

  echo $DEFAULT_WEB_BROWSER "$SEARCH_ENGINE_PAGE$SEARCH_PATTERN$BUILD_QUERY_PARAMETER"

  echo

  $DEFAULT_WEB_BROWSER "$SEARCH_ENGINE_PAGE$SEARCH_PATTERN$BUILD_QUERY_PARAMETER"

  add "$SEARCH_ENGINE_PAGE$SEARCH_PATTERN$BUILD_QUERY_PARAMETER"

}

main(){
  n=$(cat -);

  [ -z "$n" ] && usage

  local OPTION_ARGS=( $n )

  local OPTION_ARGS_PATTERN="--"

  local OPTION_ARGS_REGEXP_PATTERN="^$OPTION_ARGS_PATTERN"

  if [[ $(is_single_row "$n") -ne 0 ]];then
    #単一行でない場合
    usage
  fi

  local OPTION_CNT=${#OPTION_ARGS[@]}

  for subcmd in ${OPTION_ARGS[@]};do
    case $subcmd in
      *)
        if [[ $subcmd =~ "remove"  ]];then
          remove ${OPTION_ARGS[@]:1:$OPTION_CNT}
        fi

        if [[ $subcmd =~ "add"  ]];then
          add ${OPTION_ARGS[@]:1:$OPTION_CNT}
        fi

        if [[ $subcmd =~ "search"  ]];then
          search ${OPTION_ARGS[@]:1:$OPTION_CNT}
        fi

        usage

    esac
  done

}

[ -p /dev/stdin ] && cat - | main
[ -p /dev/stdin ] || echo -ne "$@" | main
